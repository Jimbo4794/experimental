/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tektoncd/experimental/polling/pkg/apis/poll/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PollLister helps list Polls.
// All objects returned here must be treated as read-only.
type PollLister interface {
	// List lists all Polls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Poll, err error)
	// Polls returns an object that can list and get Polls.
	Polls(namespace string) PollNamespaceLister
	PollListerExpansion
}

// pollLister implements the PollLister interface.
type pollLister struct {
	indexer cache.Indexer
}

// NewPollLister returns a new PollLister.
func NewPollLister(indexer cache.Indexer) PollLister {
	return &pollLister{indexer: indexer}
}

// List lists all Polls in the indexer.
func (s *pollLister) List(selector labels.Selector) (ret []*v1alpha1.Poll, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Poll))
	})
	return ret, err
}

// Polls returns an object that can list and get Polls.
func (s *pollLister) Polls(namespace string) PollNamespaceLister {
	return pollNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PollNamespaceLister helps list and get Polls.
// All objects returned here must be treated as read-only.
type PollNamespaceLister interface {
	// List lists all Polls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Poll, err error)
	// Get retrieves the Poll from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Poll, error)
	PollNamespaceListerExpansion
}

// pollNamespaceLister implements the PollNamespaceLister
// interface.
type pollNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Polls in the indexer for a given namespace.
func (s pollNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Poll, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Poll))
	})
	return ret, err
}

// Get retrieves the Poll from the indexer for a given namespace and name.
func (s pollNamespaceLister) Get(name string) (*v1alpha1.Poll, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("poll"), name)
	}
	return obj.(*v1alpha1.Poll), nil
}
