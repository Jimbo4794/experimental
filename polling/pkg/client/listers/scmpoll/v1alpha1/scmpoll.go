/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tektoncd/experimental/polling/pkg/apis/scmpoll/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SCMPollLister helps list SCMPolls.
// All objects returned here must be treated as read-only.
type SCMPollLister interface {
	// List lists all SCMPolls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SCMPoll, err error)
	// SCMPolls returns an object that can list and get SCMPolls.
	SCMPolls(namespace string) SCMPollNamespaceLister
	SCMPollListerExpansion
}

// sCMPollLister implements the SCMPollLister interface.
type sCMPollLister struct {
	indexer cache.Indexer
}

// NewSCMPollLister returns a new SCMPollLister.
func NewSCMPollLister(indexer cache.Indexer) SCMPollLister {
	return &sCMPollLister{indexer: indexer}
}

// List lists all SCMPolls in the indexer.
func (s *sCMPollLister) List(selector labels.Selector) (ret []*v1alpha1.SCMPoll, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SCMPoll))
	})
	return ret, err
}

// SCMPolls returns an object that can list and get SCMPolls.
func (s *sCMPollLister) SCMPolls(namespace string) SCMPollNamespaceLister {
	return sCMPollNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SCMPollNamespaceLister helps list and get SCMPolls.
// All objects returned here must be treated as read-only.
type SCMPollNamespaceLister interface {
	// List lists all SCMPolls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SCMPoll, err error)
	// Get retrieves the SCMPoll from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SCMPoll, error)
	SCMPollNamespaceListerExpansion
}

// sCMPollNamespaceLister implements the SCMPollNamespaceLister
// interface.
type sCMPollNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SCMPolls in the indexer for a given namespace.
func (s sCMPollNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SCMPoll, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SCMPoll))
	})
	return ret, err
}

// Get retrieves the SCMPoll from the indexer for a given namespace and name.
func (s sCMPollNamespaceLister) Get(name string) (*v1alpha1.SCMPoll, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scmpoll"), name)
	}
	return obj.(*v1alpha1.SCMPoll), nil
}
